- add expiration date to point transaction table, etnity and code
- Modify held and available calulcations to exclude expired points (and make calculation fully correct)
- return a better HTTP response than 204 to DELETE requests
--  http://blog.ploeh.dk/2013/04/30/rest-lesson-learned-avoid-204-responses/
- implement point to money REST interface
- add point_transaction_comment table and entity and relationships
- figure out how to map message JSON column using JPA  see this URL:
  https://devlearnings.wordpress.com/2014/03/28/using-postgres-json/
- put unique constraints in the database and entity code/annotations (like unique loyalty code and division id in the loyalty table
- make sure I'm using the right datetime type (i.e. timestamp without time zone) in Postgres.  Should I use timezone?
- figure out how to add lastmoduserid, lastmoddatetime, createduserid, createddatetime columsn to all tables
- create a person name entity (look at https://developers.google.com/resources/api-libraries/documentation/plusDomains/v1/java/latest/com/google/api/services/plusDomains/model/Person.Name.html)
- create an person address entity
- figure out how to use more than one module in my master angular module (like for companies and persons)
- change things so we return the number of points with each kind of status (available, held, etc.)
- see if I can write initialization code to initialize database when it's started
- figure out how to handle the action of adding a point transaction and figuring out how to handle point transaction type
    - i.e. do we use standard strings like "add", "delete", etc. or do it through the URL
- figure out how to return a transaction id to the caller
- added a new $scope variable for the mode (list, edit, etc.) for each type!
- change Entities to use property based annotation vs field based
- figure out how to add URLs under /test to the /profiles output!
- figure out security
- do error handling
- figure out how to deploy a new version of the REST interface when in production without disrupting operations!

-- meeting
- business logic for calculating points earned will be in Loyalty Program(LP)
- gift card, merch credit complexities when calculating earned points
- no proportional assignment of points to line items, allotment is priority based
  (i.e. points first)
- assign unique key to points so that they can be redeemed by the expiration date
- introduce concept of 'bonus' points given when you make a purchase or when you redeem
-- email interfaces
-- event interfaces (like double point value for a weekend, etc.)
-- screen and functionality for adding points earned when she places an order without logging in
-- add order/lineitem info to Loyalty Program to make it easier to tie temporary
   customer numbers or guest accounts to a newly created 'real' account.
-- modify interfaces to accept structured and non-structured demographic information for a Loyalty Account
   - birthday
   - category preference
   - size preference
   - favorite season
-- add messages and messaging
-- add email to customer records
-- make sure points are assigned by brand
-- add number of new/existing messages to loyalty REST interface return
-- look at Nordstrom's point program
-- look at Petco loyalty portal in David's ppt
-- see if I can easily generate a SOAP interface (or implement a SOAP shim to REST)
-- get AWS pricing info
-- return transaction (i.e. payment id) # when points are held, etc.
-- add order shipment level (CIrcle has payment record for each shipment level)
-- add order info to point transactions
-- figure out how to deal with having a temporary ML customer number until a first order is placed
-- add reason why point transactions happened (shipment, gift, etc., hold shipment number and date)
-- add REST interface to allow adding a customer to a loyalty code that was assigned a temporary ML customer code
-- add REST interface to associate an order with a payment id
-- add REST interface to hold points with Order#, TmpCustNo (if there is one), CustNo, Payment Id#
-- all shipment records will be sent, how about other records?
-- records what points are worth when a order is made so they can be redeemed properly because we'll
only get the cash amount when items are shipped
-- only record point redemption on shipment!
-- figure out to handle partial shipments, cancellations, returns, etc.
-- from CIrce how to we inform loyalty program about held points that should be released (not redeemed)





