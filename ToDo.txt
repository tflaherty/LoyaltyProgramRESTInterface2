-- revisit point transaction types
-- add order number to holdPoints call

-- figure out how to return validation errors in things like the RPCController which uses @Valid annotation
-- implement JSON RPC standards in my RPC interface
-- implement transactions in my RPC interface
-- implement point transaction source tables
- make sure I'm using the right datetime type (i.e. timestamp without time zone) in Postgres.  Should I use timezone?
-- read this
-- http://stackoverflow.com/questions/29685017/crazy-ms-sql-server-jdbc-driver-at-datetime-field-or-time-zone-issue/
-- Use this?
-- @Column(name = "run_from", columnDefinition= "TIMESTAMP WITH TIME ZONE")
-- @NotNull
-- @Temporal(TemporalType.TIMESTAMP)

-------------------------------------------------------------------------------------------------------------
change point transactions to look like:
pointTypes = { Normal, Held }
PointTransactionTypes = { Hold, Release, Redeem, Earn, Gift, Expire, Transfer, Other }
PointTransactionSourceTypes = { Order, Expiration (System would be better), Marketing, Support, Event, Other }
PointTransactionSourceId = { order_transaction_id, point_transaction_id, event_id, ... }

(src)loyaltyId
(src)pointType
(src)points
dstLoyaltyId
dstPointType
dstPoints
pointTransactionType
pointTransactionSourceType
pointTransactionSourceId
expirationDate
createdDate

I need a table that breaks down point transactions into pieces
(e.g.  If I have 75 available points, broken down into 25 from one
order and 50 from another, and I have a hold of 60 points, I have
to record that 50 of those held points came from one point transaction
and 10 from another)

More thoughts:
Have a subtransaction table.  This will be useful in several cases:
    - a redemption of 100 points occurs which ends up redeeming points earned on more than one point transaction (earned, etc.)
    - a transfer of points (e.g held or released, points moved from one account to another)
    - points earned can be broken down by order/line/sku(?)
Use a trigger (somewhere) to keep a running total of points/point types (will probably have to go on the subtransaction table)
Use join table inheritance (See JPA2, page 300)

-------------------------------------------------------------------------------------------------------------
Order Schema

Order, OrderDetail, OrderTransaction/subtransaction(?) tables

Use join table inheritance

-------------------------------------------------------------------------------------------------------------

- layout of flow in detail
-- account creation
-- account retrieval
-- earning points via an order
-- redeeming points via an order
-- cancellations
-- returns
-- returns or cancellations on returns
-- point expiration

- find out why the nightly background 'task' is not being run
-- ran on 9/12 - 9/15, NOT 9/16, then again on 9/17, NOT 9/18

- figure out how the entity-table mapping is happening for PointTransaction (for instance)
- find out why divisions URL doesn't return a proper HTTP response when referring to a division id that doesn't exist
- assign unique key to points (or use another method) so that they can be redeemed in order by the expiration date
- Modify held and available calulcations to exclude expired points (and make calculation fully correct)
- return a better HTTP response than 204 to DELETE requests
    http://blog.ploeh.dk/2013/04/30/rest-lesson-learned-avoid-204-responses/
- implement point to money REST interface or return it as part of Loyalty REST interface (like held and available)
- add point_transaction_comment table (and perhaps a person or loyalty one too) and entity and relationships
- figure out how to map message JSON column using JPA  see this URL:
    https://devlearnings.wordpress.com/2014/03/28/using-postgres-json/
- figure out how to add lastmoduserid, lastmoddatetime, createduserid, createddatetime columsn to all tables
- create a person name entity (look at https://developers.google.com/resources/api-libraries/documentation/plusDomains/v1/java/latest/com/google/api/services/plusDomains/model/Person.Name.html)
- create an person address entity
- change things so we return the number of points with each kind of status (available, held, etc.)
- see if I can write initialization code to initialize database when it's started
- figure out how to handle the action of adding a point transaction and figuring out how to handle point transaction type
    i.e. do we use standard strings like "add", "delete", etc. or do it through the URL
- figure out how to return a transaction id to the caller
  INSERT requests via REST seem to always return the created object (with its id) so that might be sufficient
- (is this necessary and/or desired?) change Entities to use property based annotation vs field based
- figure out how to add URLs under /test to the /profiles output!
- figure out security
  Jon is looking into whitelisting as our first approach
- do error handling
- figure out how to deploy a new version of the REST interface when in production without disrupting operations!
- Make sure that cron.yaml is the best way (and will work at all!) to run nightly job reliably in scaled AWS environment

------ client code
- figure out how to use more than one module in my master angular module (like for companies and persons)
- added a new $scope variable for the mode (list, edit, etc.) for each type!


-- meeting
- business logic for calculating points earned will be in Loyalty Program(LP)
- gift card, merch credit complexities when calculating earned points
- no proportional assignment of points to line items, allotment is priority based
  (i.e. points first)
- assign unique key to points so that they can be redeemed by the expiration date
- introduce concept of 'bonus' points given when you make a purchase or when you redeem
-- email interfaces
-- event interfaces (like double point value for a weekend, etc.)
-- screen and functionality for adding points earned when she places an order without logging in
-- add order/lineitem info to Loyalty Program to make it easier to tie temporary
   customer numbers or guest accounts to a newly created 'real' account.
-- modify interfaces to accept structured and non-structured demographic information for a Loyalty Account
   - birthday
   - category preference
   - size preference
   - favorite season
-- add messages and messaging
-- add email to customer records
-- make sure points are assigned by brand
-- add number of new/existing messages to loyalty REST interface return
-- look at Nordstrom's point program
-- look at Petco loyalty portal in David's ppt
-- see if I can easily generate a SOAP interface (or implement a SOAP shim to REST)
-- get AWS pricing info
-- return transaction (i.e. payment id) # when points are held, etc.
-- add order shipment level (CIrcle has payment record for each shipment level)
-- add order info to point transactions
-- figure out how to deal with having a temporary ML customer number until a first order is placed
-- add reason why point transactions happened (shipment, gift, etc., hold shipment number and date)
-- add REST interface to allow adding a customer to a loyalty code that was assigned a temporary ML customer code
-- add REST interface to associate an order with a payment id
-- add REST interface to hold points with Order#, TmpCustNo (if there is one), CustNo, Payment Id#
-- all shipment records will be sent, how about other records?
-- records what points are worth when a order is made so they can be redeemed properly because we'll
only get the cash amount when items are shipped
-- only record point redemption on shipment!
-- figure out to handle partial shipments, cancellations, returns, etc.
-- from CIrce how to we inform loyalty program about held points that should be released (not redeemed)





