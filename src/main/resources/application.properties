spring.main.banner-mode=off

# This works for a local PostgreSQL server
# spring.datasource.url=jdbc:postgresql://localhost:5432
# spring.datasource.driver-class-name=org.postgresql.Driver
# spring.datasource.username=foo
# spring.datasource.password=foo
# spring.jpa.database=POSTGRESQL
# spring.jpa.show-sql=false
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# This works for PostgreSQL on Amazon RDS
spring.datasource.url=jdbc:postgresql://${RDS_HOSTNAME}:${RDS_PORT}/${RDS_DB_NAME}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=${RDS_USERNAME}
spring.datasource.password=${RDS_PASSWORD}
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=false
# this can be switched to 'create'
spring.jpa.hibernate.ddl-auto=none
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# This is for a local SQL Server
# This next one makes sure that JPA Column Annotation works properly
# spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.EJB3NamingStrategy
# spring.datasource.url=jdbc:jtds:sqlserver://localhost/BAG_IPM
# spring.datasource.driver-class-name=net.sourceforge.jtds.jdbc.Driver
# spring.datasource.username=icadmin
# spring.datasource.password=adm1n
# # spring.jpa.database=POSTGRESQL
# spring.jpa.show-sql=false
# spring.jpa.hibernate.ddl-auto=none
# spring.jpa.database-platform=org.hibernate.dialect.SQLServerDialect


security.user.name=user
security.user.password=password